<project xmlns="http://maven.apache.org/POM/4.0.0"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">

    <modelVersion>4.0.0</modelVersion>

    <groupId>com.rsdesenvolvimento</groupId>
    <artifactId>microservices-pedido</artifactId>
    <version>1.0.0-SNAPSHOT</version>
    <packaging>pom</packaging>

    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>3.4.5</version>
        <relativePath />
    </parent>

    <modules>
        <module>eureka-server</module>
        <module>estoque</module>
        <module>pedido-service</module>
        <module>pagamento-service</module>
        <module>notificacao-service</module>
        <module>api-gateway</module>
    </modules>


    <properties>
        <java.version>21</java.version>
        <spring-cloud.version>2024.0.1</spring-cloud.version>
        <spring-mapstruct.version>1.6.2</spring-mapstruct.version>
        <spring-flayway.version>11.8.0</spring-flayway.version>
        <spring-micrometer-prometheus.version>1.15.0-M3</spring-micrometer-prometheus.version>
        <!-- <spring-loki.version>1.6.0</spring-loki.version> -->
        <spring-sonar.version>5.1.0.4751</spring-sonar.version>
        <jacoco.version>0.8.12</jacoco.version>

        <!-- SonarQube Properties -->
        <sonar.projectKey>restaurante-web</sonar.projectKey>
        <sonar.projectName>restaurante-web</sonar.projectName>
        <sonar.host.url>http://localhost:9000</sonar.host.url>
        <sonar.token>sqp_4cd0be72b79330df1e09866889420ff495a5e20c</sonar.token>
        <sonar.sources>src/main/java</sonar.sources>
        <sonar.tests>src/test/java</sonar.tests>
        <sonar.java.binaries>target/classes</sonar.java.binaries>
        <sonar.java.test.binaries>target/test-classes</sonar.java.test.binaries>
        <sonar.coverage.jacoco.xmlReportPaths>target/site/jacoco/jacoco.xml</sonar.coverage.jacoco.xmlReportPaths>
        <sonar.junit.reportPaths>target/surefire-reports</sonar.junit.reportPaths>
    </properties>

    <dependencyManagement>
        <dependencies>
            <dependency>
                <groupId>org.springframework.cloud</groupId>
                <artifactId>spring-cloud-dependencies</artifactId>
                <version>${spring-cloud.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
            <!-- MapStruct-->
            <dependency>
                <groupId>org.mapstruct</groupId>
                <artifactId>mapstruct</artifactId>
                <version>${spring-mapstruct.version}</version>
            </dependency>
            <dependency>
                <groupId>org.mapstruct</groupId>
                <artifactId>mapstruct-processor</artifactId>
                <version>${spring-mapstruct.version}</version>
                <scope>provided</scope>
            </dependency>

            <!-- Flyway-->
            <dependency>
                <groupId>org.flywaydb</groupId>
                <artifactId>flyway-core</artifactId>
                <version>${spring-flayway.version}</version>
            </dependency>

            <dependency>
                <groupId>org.flywaydb</groupId>
                <artifactId>flyway-database-postgresql</artifactId>
                <version>${spring-flayway.version}</version>
                <scope>runtime</scope>
            </dependency>

            <!-- Micrometer Prometheus-->
            <dependency>
                <groupId>io.micrometer</groupId>
                <artifactId>micrometer-registry-prometheus</artifactId>
                <version>${spring-micrometer-prometheus.version}</version>
            </dependency>
        </dependencies>
    </dependencyManagement>


    <build>
        <pluginManagement>
            <plugins>
                <plugin>
                    <groupId>org.springframework.boot</groupId>
                    <artifactId>spring-boot-maven-plugin</artifactId>
                </plugin>

                <!-- SonarQube Maven Plugin -->
                <plugin>
                    <groupId>org.sonarsource.scanner.maven</groupId>
                    <artifactId>sonar-maven-plugin</artifactId>
                    <version>${spring-sonar.version}</version>
                </plugin>

                <!-- JaCoCo Maven Plugin para cobertura de código -->
                <plugin>
                    <groupId>org.jacoco</groupId>
                    <artifactId>jacoco-maven-plugin</artifactId>
                    <version>${jacoco.version}</version>
                </plugin>
            </plugins>
        </pluginManagement>

        <plugins>
            <!-- SonarQube Plugin Global -->
            <plugin>
                <groupId>org.sonarsource.scanner.maven</groupId>
                <artifactId>sonar-maven-plugin</artifactId>
            </plugin>

            <!-- JaCoCo Plugin para cobertura de código -->
            <plugin>
                <groupId>org.jacoco</groupId>
                <artifactId>jacoco-maven-plugin</artifactId>
                <executions>
                    <execution>
                        <goals>
                            <goal>prepare-agent</goal>
                        </goals>
                    </execution>
                    <execution>
                        <id>report</id>
                        <phase>test</phase>
                        <goals>
                            <goal>report</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>
</project>